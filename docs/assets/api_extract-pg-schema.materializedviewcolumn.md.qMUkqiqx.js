import{_ as t,o as e,c as a,R as r}from"./chunks/framework.nsqIH7ox.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/extract-pg-schema.materializedviewcolumn.md","filePath":"api/extract-pg-schema.materializedviewcolumn.md"}'),i={name:"api/extract-pg-schema.materializedviewcolumn.md"},d=r('<p><a href="./">Home</a> &gt; <a href="./extract-pg-schema.html">extract-pg-schema</a> &gt; <a href="./extract-pg-schema.materializedviewcolumn.html">MaterializedViewColumn</a></p><h2 id="materializedviewcolumn-interface" tabindex="-1">MaterializedViewColumn interface <a class="header-anchor" href="#materializedviewcolumn-interface" aria-label="Permalink to &quot;MaterializedViewColumn interface&quot;">​</a></h2><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MaterializedViewColumn</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Modifiers</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./extract-pg-schema.materializedviewcolumn.comment.html">comment</a></td><td></td><td>string | null</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.defaultvalue.html">defaultValue</a></td><td></td><td>any</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.expandedtype.html">expandedType</a></td><td></td><td>string</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.fakeinformationschemavalue.html">fakeInformationSchemaValue</a></td><td></td><td><a href="./extract-pg-schema.informationschemacolumn.html">InformationSchemaColumn</a></td><td>The Postgres information_schema views do not contain info about materialized views. This value is the result of a query that matches the one for regular views. Use with caution, not all fields are guaranteed to be meaningful and/or accurate.</td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.generated.html">generated</a></td><td></td><td>&quot;ALWAYS&quot; | &quot;NEVER&quot; | &quot;BY DEFAULT&quot;</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.indices.html">indices?</a></td><td></td><td><a href="./extract-pg-schema.index.html">Index</a>[]</td><td><em>(Optional)</em></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.isarray.html">isArray</a></td><td></td><td>boolean</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.isidentity.html">isIdentity</a></td><td></td><td>boolean</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.isnullable.html">isNullable?</a></td><td></td><td>boolean</td><td><em>(Optional)</em></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.isprimarykey.html">isPrimaryKey?</a></td><td></td><td>boolean</td><td><em>(Optional)</em></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.isupdatable.html">isUpdatable</a></td><td></td><td>boolean</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.maxlength.html">maxLength</a></td><td></td><td>number | null</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.name.html">name</a></td><td></td><td>string</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.ordinalposition.html">ordinalPosition</a></td><td></td><td>number</td><td></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.reference.html">reference?</a></td><td></td><td><a href="./extract-pg-schema.columnreference.html">ColumnReference</a> | null</td><td><em>(Optional)</em></td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.references.html">references?</a></td><td></td><td><a href="./extract-pg-schema.columnreference.html">ColumnReference</a>[]</td><td><em>(Optional)</em> If views are resolved, this will contain the references from the source column in the table that this view references. Note that if the source is another view, that view in turn will be resolved if possible, leading us to a table in the end.</td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.source.html">source?</a></td><td></td><td>{ schema: string; table: string; column: string; }</td><td><em>(Optional)</em> This will contain a &quot;link&quot; to the source table or view and column, if it can be determined.</td></tr><tr><td><a href="./extract-pg-schema.materializedviewcolumn.type.html">type</a></td><td></td><td><a href="./extract-pg-schema.materializedviewcolumntype.html">MaterializedViewColumnType</a></td><td></td></tr></tbody></table>',6),l=[d];function n(m,c,o,h,s,p){return e(),a("div",null,l)}const g=t(i,[["render",n]]);export{f as __pageData,g as default};
